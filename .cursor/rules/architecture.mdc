---
description: 
globs: 
alwaysApply: true
---

# Architecture description of this project

This project supports Go modules, and the module information is defined in the [go.mod](mdc:go.mod) file.

This project is a Golang-based project that uses `github.com/redis/go-redis/v9` as the queue and caching system, and employs the `github.com/go-redis/cache/v9` library for simple cache management and operations. The routing system of this project is based on the `Gin` framework, and the ORM system uses `GORM` with `MySQL` as the database. The queue task framework in this project utilizes `github.com/ThreeDotsLabs/watermill`. The logging system is based on the `github.com/rs/zerolog/log` framework. The command-line program framework uses `github.com/spf13/cobra`. The programs written for this project must pass the `golangci-lint` checks; please refer to the `/.golangci.yaml` file for the requirements. If this project needs to call third-party HTTP interfaces, please use the `github.com/go-resty/resty/v2` library, which provides a well-structured wrapper for HTTP calls.This project uses `github.com/spf13/viper` to read configuration files and environment variables.

You need to organize the programs you write according to the file structure of this project, maintaining a clean and consistent directory structure. Moreover, you should prioritize using the methods defined in to return HTTP responses and data with the correct status codes.

Please refer to the following handler example when writing HTTP handlers.
```golang
func HomePage(c *base.Context) {
    // access the user if user logined
	user := c.LoginUser()
	if user == nil {
        // if not logined, return 403 with forbidden status code
		c.Forbidden("you are not login", gin.H{})
	} else {
        // if logined, return 200 and the user infomation
		c.Success(gin.H{
			"data": fmt.Sprintf("your user id is: %d", user.ID),
		})
	}
}
```
`base.Context` defines commonly used HTTP response methods, including both normal and error responses, as well as functions for globally accessing user information.

After defining the handler, you also need to add it to the mapping in [route.go](mdc:api/route/route.go).
```golang
r.GET("/", handler.HomePage)
```
